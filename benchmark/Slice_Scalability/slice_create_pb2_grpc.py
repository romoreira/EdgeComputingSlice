# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc

import slice_create_pb2 as slice__create__pb2


class SliceManagerStub(object):
    """Missing associated documentation comment in .proto file"""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.CreateSlice = channel.unary_unary(
                '/SliceManager/CreateSlice',
                request_serializer=slice__create__pb2.CreateRequest.SerializeToString,
                response_deserializer=slice__create__pb2.CreationReply.FromString,
                )
        self.DeleteSlice = channel.unary_unary(
                '/SliceManager/DeleteSlice',
                request_serializer=slice__create__pb2.DeleteRequest.SerializeToString,
                response_deserializer=slice__create__pb2.DeletionReply.FromString,
                )


class SliceManagerServicer(object):
    """Missing associated documentation comment in .proto file"""

    def CreateSlice(self, request, context):
        """Missing associated documentation comment in .proto file"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeleteSlice(self, request, context):
        """Missing associated documentation comment in .proto file"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_SliceManagerServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'CreateSlice': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateSlice,
                    request_deserializer=slice__create__pb2.CreateRequest.FromString,
                    response_serializer=slice__create__pb2.CreationReply.SerializeToString,
            ),
            'DeleteSlice': grpc.unary_unary_rpc_method_handler(
                    servicer.DeleteSlice,
                    request_deserializer=slice__create__pb2.DeleteRequest.FromString,
                    response_serializer=slice__create__pb2.DeletionReply.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'SliceManager', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class SliceManager(object):
    """Missing associated documentation comment in .proto file"""

    @staticmethod
    def CreateSlice(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/SliceManager/CreateSlice',
            slice__create__pb2.CreateRequest.SerializeToString,
            slice__create__pb2.CreationReply.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DeleteSlice(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/SliceManager/DeleteSlice',
            slice__create__pb2.DeleteRequest.SerializeToString,
            slice__create__pb2.DeletionReply.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)
